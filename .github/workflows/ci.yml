name: CI
on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  # this builds the Docker container, if needed, then caches it to the GitHub
  # Container Registry, `ghcr.io`.
  #
  # it's pretty important that this works, as we use it to work on the Rover!
  build-docker-image:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker build tools
        uses: docker/setup-buildx-action@v3

      - name: Log in on GitHub's ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add QEMU (for cross-arch building)
        uses: docker/setup-qemu-action@v3

      # make repo owner name (Sooner-Rover-Team) lowercase
      #
      # otherwise, we can't push to the ghcr.io directory!
      - name: Get lowercase org owner name
        run: |
          repo_lower=$(echo "${{ github.repository_owner }}" | awk '{print tolower($0)}')
          echo "ORGNAME=${repo_lower}" >> ${GITHUB_ENV}

      # see: https://docs.docker.com/build/ci/github-actions/cache/
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/${{ env.ORGNAME }}/auto-ros2:latest

  check-ros2-workspace:
    # same as jetson :p
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-simulation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # install node real quick
      - run: sudo apt-get update && sudo apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs

      # grab uv and cargo
      - uses: astral-sh/setup-uv@v5
      - uses: moonrepo/setup-rust@v1

      # grab a python binary
      - name: Set up Python
        run: uv python install

      # set up environment
      - name: Install the project
        run: |
          uv sync --all-extras --dev
          . .venv/bin/activate

      # enter environment
      - run: . .venv/bin/activate

      # build the entire ROS 2 workspace just to ensure things work.
      #
      # this'll use colcon
      - name: Build ROS 2 workspace
        uses: ros-tooling/action-ros-ci@v0.4
        with:
          target-ros2-distro: humble
          coverage-result: false

  lint-python:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-simulation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # install node real quick
      - run: sudo apt-get update && sudo apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs

      # grab uv
      - uses: astral-sh/setup-uv@v5

      # grab a python binary
      - name: Set up Python
        run: uv python install

      # set up environment
      - name: Install the project
        run: |
          uv sync --all-extras --dev
          . .venv/bin/activate

      # check python lints
      - name: Lint (Python)
        run: uv tool run ruff check

  format-python:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-simulation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # install node real quick
      - run: sudo apt-get update && sudo apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs

      # grab uv
      - uses: astral-sh/setup-uv@v5

      # grab a python binary
      - name: Set up Python
        run: uv python install

      # set up environment
      - name: Install the project
        run: |
          uv sync --all-extras --dev
          . .venv/bin/activate

      # check python lints
      - name: Format with Ruff (Python)
        run: uv tool run ruff format --check

  lint-rust:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-simulation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: sudo apt-get update && sudo apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs

      - uses: moonrepo/setup-rust@v1
        with:
          components: clippy, rustfmt
          bins: cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # run rust lints
      - name: Lint with Clippy (Rust)
        run: cargo clippy --workspace

  test-rust:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-simulation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: sudo apt-get update && sudo apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs

      - uses: moonrepo/setup-rust@v1
        with:
          components: clippy, rustfmt
          bins: cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # run tests
      - name: Test with Nextest (Rust)
        run: cargo nextest run --test-threads 1 --no-fail-fast

  format-rust:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-simulation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: sudo apt-get update && sudo apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs

      - uses: moonrepo/setup-rust@v1
        with:
          components: clippy, rustfmt
          bins: cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # run the formatter
      - name: Format with `rustfmt` (Rust)
        run: cargo fmt --check
