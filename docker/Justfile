# Some basic commands to help build and run the simulator image.

set shell := ["bash", "-c"]
ros2_workspace_dir := justfile_directory()


build:
    #!/usr/bin/env bash
    #
    # check if we need sudo
    source ./scripts/find_sudo.bash
    source ./scripts/find_docker.bash

    $OPTIONAL_SUDO $DOCKER stop soro &> /dev/null || true
    $OPTIONAL_SUDO $DOCKER rm soro &> /dev/null || true
    $OPTIONAL_SUDO $DOCKER build . -t ros2-soro

run-local: build
    just run "false"

run-remote:
    just run "true"

run $DOWNLOAD_IMAGE='true':
    #!/usr/bin/env bash
    #
    # set some color variables for printing
    NOCOLOR='\033[0m'
    LIGHTRED='\033[1;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    LIGHTPURPLE='\033[1;35m'

    # find the workspace dir (since we're gonna mount it)
    declare -x AUTO_ROS2_REPO_LOCATION="$(realpath "{{ros2_workspace_dir}}/..")"
    echo -e "${BLUE}We'll mount the \`auto_ros2\` repo with path: \`${LIGHTPURPLE}$AUTO_ROS2_REPO_LOCATION${BLUE}\`${NOCOLOR}"

    # here, we're going to check for SELinux permissions. without it, we can
    # experience failures when attempting to mount on systems with secure
    # default settings on SELinux.
    echo -e "Checking SELinux permissions..."
    bash ./scripts/fix_selinux.bash
    echo -e "${BLUE}SELinux is configured correctly.${NOCOLOR}"

    # check if we need to use `sudo`.
    #
    # (we don't want it on macOS)
    source ./scripts/find_sudo.bash

    # use podman or docker depending on what's present...
    source ./scripts/find_docker.bash

    # if we're on linux, fix the networking
    if [ "$(uname)" = "Linux" ] && ! command -v podman &> /dev/null; then
        echo "Attempting to fix networking on Linux..."
        echo "${LIGHTRED}Please enter your password if prompted!${NOCOLOR}"

        # find docker's bridge network ip range
        #
        # note: copilot made that regex, dont trust it 100%
        DOCKER_SUBNET=$(sudo $DOCKER network inspect bridge | grep -oP '"Subnet": "\K[^"]+')
        DOCKER_INTERFACE="docker0"

        # on that range, we'll want to allow it on iptables
        sudo sysctl -w net.ipv4.ip_forward=1 >> /dev/null || true
        sudo iptables -P FORWARD ACCEPT >> /dev/null || true
        sudo iptables -t nat -A POSTROUTING -s $DOCKER_SUBNET ! -o $DOCKER_INTERFACE -j MASQUERADE >> /dev/null || true

        echo
        echo "Network fix applied!"
    fi

    # download the image, if requested, to avoid building it ourselves
    if [ "$DOWNLOAD_IMAGE" = "true" ]; then
        # set the "image name" for the docker compose file
        export IMAGE_NAME="ghcr.io/sooner-rover-team/auto-ros2:latest"

        # perform the download
        echo -e "Downloading Docker image..."
        $OPTIONAL_SUDO $DOCKER pull $IMAGE_NAME
        echo -e "Download complete!"
    else
        echo -e "Local image requested. Using that... (download image was: $DOWNLOAD_IMAGE)"
        export IMAGE_NAME="ros2-soro:latest"
    fi

    # remove any existing container. we dont want that mf around
    $OPTIONAL_SUDO $DOCKER compose down
    $OPTIONAL_SUDO $DOCKER rm soro >> /dev/null || true

    # set any parameters (currently just for rootless podman)
    set DOCKER_ARGS=""
    if [ "$DOCKER" = "podman" ]; then
        set DOCKER_ARGS="--pod-args=\"--userns=keep-id\""
    fi

    echo -e "Starting Docker container..."
    echo -e "${LIGHTRED}If requested, please enter your password.${NOCOLOR}"
    $OPTIONAL_SUDO $DOCKER compose $DOCKER_ARGS up -d
    echo
    echo -e "${GREEN}Container started successfully!${NOCOLOR}"
    echo

    # print our logo because its cool
    bash ./scripts/print_soro_logo.bash

    # tell the user how to log in
    echo -e "${LIGHTRED}Please open the following link in your browser:${NOCOLOR}"
    echo -e "${LIGHTPURPLE}http://localhost:5801/vnc.html?host=localhost&port=5901${NOCOLOR}"
    echo
    echo -e "${LIGHTRED}Alternatively, for better performance, paste this into TurboVNC Viewer:${NOCOLOR}"
    echo -e "${LIGHTPURPLE}localhost:5901${NOCOLOR}"
    echo
    echo -e "${LIGHTRED}Note that the password is \`${LIGHTPURPLE}NotIan!${LIGHTRED}\`, with the punctuation.${NOCOLOR}"

# cleans up **ALL** Docker stuff on your computer.
#
# this can result in a lot more storage space on your computer,
# but please avoid doing it if you've got a lot of Docker images and such.
#
# they will all be removed - even if unrelated to SoRo!
clean:
    #!/usr/bin/env bash
    source ./scripts/find_sudo.bash
    source ./scripts/find_docker.bash

    # prune everything
    $OPTIONAL_SUDO $DOCKER system prune --volumes
